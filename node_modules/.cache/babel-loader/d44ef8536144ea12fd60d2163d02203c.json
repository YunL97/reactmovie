{"ast":null,"code":"var _jsxFileName = \"/Users/iyunsig/Document/js3/18/src/App.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      movies: [{}, {}]\n    };\n\n    this.getMovies = async () => {\n      //비동기\n      console.log(\"3\");\n      const {\n        data: {\n          data: {\n            movies\n          }\n        }\n      } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"); //axops 는 그렇게 빠르지 않으므로 componentDidMount함수가 끝날때까지 우리가 기다려야한다\n\n      console.log(\"4\");\n      this.setState({\n        movies,\n        isLoading: false\n      }); //setState를 호출하면 render 다시실행\n\n      console.log(\"5\");\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"2\");\n    this.getMovies();\n  }\n\n  render() {\n    console.log(\"1\");\n    const {\n      isLoading,\n      movies\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: isLoading ? \"Loading...\" : movies.map(movie => {\n        console.log(movie);\n        return /*#__PURE__*/_jsxDEV(Movie, {\n          id: moive.id,\n          year: moive.year,\n          title: moive.title,\n          summary: moive.summary,\n          poster: moive.poster\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 34\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this); //map:배열로 다시 가져와주는것\n  }\n\n}\n\nexport default App; // class App extends React.Component {\n//     state = {\n//         isLoading: true,\n//         movies: [{}, {}],\n//     };\n//     componentDidMount() {\n//         //render 호출 후에 componentDidMount 함수가 호출된다\n//         setTimeout(() => {\n//             this.setState({ isLoading: false, book: true });\n//         }, 6000);\n//         axios.\n//     }\n//     render() {\n//         const { isLoading } = this.state;\n//         return <div>{isLoading ? \"Loading...\" : \"we are ready\"}</div>;\n//     }\n// }\n//export default App;\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         console.log(\"hello\");\n//     }\n//     state = {\n//         count: 0,\n//     };\n//     add = () => {\n//         this.setState((current) => ({\n//             count: current.count + 1,\n//         })); //setState를 사용하면 호출될때마다 새state와 함께 render function이호출된다\n//     };\n//     minus = () => {\n//         this.setState((current) => ({\n//             count: current.count - 1,\n//         })); //setState를 사용하면 호출될때마다 새state와 함께 render function이호출된다\n//     };\n//     componentDidMount() {\n//         console.log(\"componentDidMount\");\n//     }\n//     componentDidUpdate() {\n//         console.log(\"i just updated\");\n//     }\n//     componentWillUnmount() {\n//         console.log(\"goodbye, reuel world\");\n//     }\n//     render() {\n//         console.log(\"i am rendering\");\n//         return (\n//             <div>\n//                 <h1>Im a class component {this.state.count}</h1>\n//                 <button onClick={this.add}>Add</button>\n//                 <button onClick={this.minus}>Minus</button>\n//             </div>\n//         ); //react는 자동적으로 나의 class component의 render method를 실행한다\n//     }\n// }\n// export default App;\n// const foodILike = [\n//     { id: 1, name: \"Kimchi\", image: \"https://kstory365.files.wordpress.com/2015/01/kimchi-01-cabbage.jpg\", rating: 5 },\n//     {\n//         id: 2,\n//         name: \"bulgogi\",\n//         image: \"https://www.google.com/search?q=%EB%B6%88%EA%B3%A0%EA%B8%B0&rlz=1C5CHFA_enKR902KR902&sxsrf=ALeKk02ziUIXmsNvR7TuYKh1cpJGpdpH8g:1593509047151&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi-p87lm6nqAhVbUd4KHVSWBBUQ_AUoAXoECBgQAw&biw=1440&bih=701&dpr=2#imgrc=kjZoAmvHGo-KfM\",\n//         rating: 5,\n//     },\n//     {\n//         id: 3,\n//         name: \"kimbap\",\n//         image: \"https://www.google.com/search?q=%EA%B9%80%EB%B0%A5&rlz=1C5CHFA_enKR902KR902&sxsrf=ALeKk03dn_nrK6M5JlKKfD5krm8w3qTmGQ:1593509069629&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjqn6rwm6nqAhXDQN4KHYLUA4EQ_AUoAXoECBgQAw&biw=1440&bih=701#imgrc=Xz3xQoYZw3bqEM\",\n//         rating: 5,\n//     },\n//     {\n//         id: 4,\n//         name: \"samgyetang\",\n//         image: \"https://img.seoul.co.kr//img/upload/2019/07/25/SSI_20190725184016.jpg\",\n//         rating: 5,\n//     },\n// ];\n// // function renderFood(dish) {\n// //     return <Food name={dish.name} picture={dish.image} />;\n// // }\n// function Food({ name, picture, rating }) {\n//     return (\n//         <div>\n//             <h2>i like {name}</h2>\n//             <h4>{rating}/5</h4>\n//             <img src={picture} alt={name} />\n//         </div>\n//     );\n// }\n// Food.propTypes = {\n//     name: PropTypes.string.isRequired,\n//     picture: PropTypes.string.isRequired,\n//     rating: PropTypes.number.isRequired, //문자나 숫자가 맞는지 확인해주는것\n// };\n// function App() {\n//     // console.log(foodILike.map(renderFood));\n//     // return <div>{foodILike.map(renderFood)}</div>;\n//     return (\n//         <div>\n//             {foodILike.map((dish) => (\n//                 <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} />\n//             ))}\n//         </div>\n//     );\n// }\n// export default App;","map":{"version":3,"sources":["/Users/iyunsig/Document/js3/18/src/App.js"],"names":["React","PropTypes","axios","Movie","App","Component","state","isLoading","movies","getMovies","console","log","data","get","setState","componentDidMount","render","map","movie","moive","id","year","title","summary","poster"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BC,KAD8B,GACtB;AACJC,MAAAA,SAAS,EAAE,IADP;AAEJC,MAAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL;AAFJ,KADsB;;AAAA,SAK9BC,SAL8B,GAKlB,YAAY;AACpB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,YAAM;AACFC,QAAAA,IAAI,EAAE;AACFA,UAAAA,IAAI,EAAE;AAAEJ,YAAAA;AAAF;AADJ;AADJ,UAIF,MAAMN,KAAK,CAACW,GAAN,CAAU,uEAAV,CAJV,CAHoB,CAO0E;;AAC9FH,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAEA,WAAKG,QAAL,CAAc;AAAEN,QAAAA,MAAF;AAAUD,QAAAA,SAAS,EAAE;AAArB,OAAd,EAVoB,CAUyB;;AAC7CG,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACH,KAjB6B;AAAA;;AAkB9BI,EAAAA,iBAAiB,GAAG;AAChBL,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,SAAKF,SAAL;AACH;;AACDO,EAAAA,MAAM,GAAG;AACLN,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,UAAM;AAAEJ,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAwB,KAAKF,KAAnC;AACA,wBACI;AAAA,gBACKC,SAAS,GACJ,YADI,GAEJC,MAAM,CAACS,GAAP,CAAYC,KAAD,IAAW;AAClBR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,4BAAO,QAAC,KAAD;AAAO,UAAA,EAAE,EAAEC,KAAK,CAACC,EAAjB;AAAqB,UAAA,IAAI,EAAED,KAAK,CAACE,IAAjC;AAAuC,UAAA,KAAK,EAAEF,KAAK,CAACG,KAApD;AAA2D,UAAA,OAAO,EAAEH,KAAK,CAACI,OAA1E;AAAmF,UAAA,MAAM,EAAEJ,KAAK,CAACK;AAAjG;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAHD;AAHV;AAAA;AAAA;AAAA;AAAA,YADJ,CAHK,CAYF;AACN;;AAnC6B;;AAqClC,eAAepB,GAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\n\nclass App extends React.Component {\n    state = {\n        isLoading: true,\n        movies: [{}, {}],\n    };\n    getMovies = async () => {\n        //비동기\n        console.log(\"3\");\n        const {\n            data: {\n                data: { movies },\n            },\n        } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"); //axops 는 그렇게 빠르지 않으므로 componentDidMount함수가 끝날때까지 우리가 기다려야한다\n        console.log(\"4\");\n\n        this.setState({ movies, isLoading: false }); //setState를 호출하면 render 다시실행\n        console.log(\"5\");\n    };\n    componentDidMount() {\n        console.log(\"2\");\n        this.getMovies();\n    }\n    render() {\n        console.log(\"1\");\n        const { isLoading, movies } = this.state;\n        return (\n            <div>\n                {isLoading\n                    ? \"Loading...\"\n                    : movies.map((movie) => {\n                          console.log(movie);\n                          return <Movie id={moive.id} year={moive.year} title={moive.title} summary={moive.summary} poster={moive.poster} />;\n                      })}\n            </div>\n        ); //map:배열로 다시 가져와주는것\n    }\n}\nexport default App;\n\n// class App extends React.Component {\n//     state = {\n//         isLoading: true,\n//         movies: [{}, {}],\n//     };\n//     componentDidMount() {\n//         //render 호출 후에 componentDidMount 함수가 호출된다\n//         setTimeout(() => {\n//             this.setState({ isLoading: false, book: true });\n//         }, 6000);\n//         axios.\n//     }\n//     render() {\n//         const { isLoading } = this.state;\n//         return <div>{isLoading ? \"Loading...\" : \"we are ready\"}</div>;\n//     }\n// }\n\n//export default App;\n\n// class App extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         console.log(\"hello\");\n//     }\n//     state = {\n//         count: 0,\n//     };\n\n//     add = () => {\n//         this.setState((current) => ({\n//             count: current.count + 1,\n//         })); //setState를 사용하면 호출될때마다 새state와 함께 render function이호출된다\n//     };\n//     minus = () => {\n//         this.setState((current) => ({\n//             count: current.count - 1,\n//         })); //setState를 사용하면 호출될때마다 새state와 함께 render function이호출된다\n//     };\n//     componentDidMount() {\n//         console.log(\"componentDidMount\");\n//     }\n//     componentDidUpdate() {\n//         console.log(\"i just updated\");\n//     }\n//     componentWillUnmount() {\n//         console.log(\"goodbye, reuel world\");\n//     }\n//     render() {\n//         console.log(\"i am rendering\");\n//         return (\n//             <div>\n//                 <h1>Im a class component {this.state.count}</h1>\n//                 <button onClick={this.add}>Add</button>\n//                 <button onClick={this.minus}>Minus</button>\n//             </div>\n//         ); //react는 자동적으로 나의 class component의 render method를 실행한다\n//     }\n// }\n\n// export default App;\n\n// const foodILike = [\n//     { id: 1, name: \"Kimchi\", image: \"https://kstory365.files.wordpress.com/2015/01/kimchi-01-cabbage.jpg\", rating: 5 },\n//     {\n//         id: 2,\n//         name: \"bulgogi\",\n//         image: \"https://www.google.com/search?q=%EB%B6%88%EA%B3%A0%EA%B8%B0&rlz=1C5CHFA_enKR902KR902&sxsrf=ALeKk02ziUIXmsNvR7TuYKh1cpJGpdpH8g:1593509047151&source=lnms&tbm=isch&sa=X&ved=2ahUKEwi-p87lm6nqAhVbUd4KHVSWBBUQ_AUoAXoECBgQAw&biw=1440&bih=701&dpr=2#imgrc=kjZoAmvHGo-KfM\",\n//         rating: 5,\n//     },\n//     {\n//         id: 3,\n//         name: \"kimbap\",\n//         image: \"https://www.google.com/search?q=%EA%B9%80%EB%B0%A5&rlz=1C5CHFA_enKR902KR902&sxsrf=ALeKk03dn_nrK6M5JlKKfD5krm8w3qTmGQ:1593509069629&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjqn6rwm6nqAhXDQN4KHYLUA4EQ_AUoAXoECBgQAw&biw=1440&bih=701#imgrc=Xz3xQoYZw3bqEM\",\n//         rating: 5,\n//     },\n//     {\n//         id: 4,\n//         name: \"samgyetang\",\n//         image: \"https://img.seoul.co.kr//img/upload/2019/07/25/SSI_20190725184016.jpg\",\n//         rating: 5,\n//     },\n// ];\n\n// // function renderFood(dish) {\n// //     return <Food name={dish.name} picture={dish.image} />;\n// // }\n\n// function Food({ name, picture, rating }) {\n//     return (\n//         <div>\n//             <h2>i like {name}</h2>\n//             <h4>{rating}/5</h4>\n//             <img src={picture} alt={name} />\n//         </div>\n//     );\n// }\n// Food.propTypes = {\n//     name: PropTypes.string.isRequired,\n//     picture: PropTypes.string.isRequired,\n//     rating: PropTypes.number.isRequired, //문자나 숫자가 맞는지 확인해주는것\n// };\n\n// function App() {\n//     // console.log(foodILike.map(renderFood));\n//     // return <div>{foodILike.map(renderFood)}</div>;\n//     return (\n//         <div>\n//             {foodILike.map((dish) => (\n//                 <Food key={dish.id} name={dish.name} picture={dish.image} rating={dish.rating} />\n//             ))}\n//         </div>\n//     );\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}